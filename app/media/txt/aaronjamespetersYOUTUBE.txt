WINDSURF 01 - Making a FLASK APP EASY!!! -  Initial Folder Structure and SETUP

https://youtu.be/9Isksd9Xhqc

Introduction: By the end of this video, you'll have a resume site that looks like this aaronjamespeters.onrender.com or you can change it, the code is also in my GitHub, if youd like to just use that. This is a complete build, covering almost every step of problem-solving and debugging. Some of the more time-consuming debugging was shortened for the sake of the video, but I always explain how I fixed the issues. This is my first video series—there are more builds to come, and as I get better at making these, I hope you'll be able to build some awesome projects, too.

In this first video, I go over the folder structure that I pre-made with OpenAI. For this simple app—or any app—it's really helpful to predesign the folders and basic scripts you'll need to render everything in the browser. Laying that foundation makes things much easier down the line. AI tools can generate scripts, but when those scripts are linked to others, there's always a chance it will accidentally break features you've already set up. While anything can be fixed if you ask the right questions (Best practices usually), you can easily get stuck in loops and waste tokens. For the planet's sake, it's best to avoid that whenever possible.

I'm not here to show half the process and pretend it works—I'm giving you the full picture. This video starts with an explanation of the initial folder structure and how to set up a basic Python Flask app using WINDSURF, Cascade (the AI platform and my name for the AI Cassi), Codeium (the AI assistant), and WINDSURF (the code editor). This series of videos will walk you through building a work application demo page that I'm using to apply for jobs. Follow along, and I'll show you everything you need to know about setting up your own Python Flask app—from key considerations to all the essential steps.

This is about reclaiming tech, redistributing power, and showing how much better life can be without everything locked up in the hands of the 1%. There's an abundance of resources—we just don't distribute them fairly. The hoarders of wealth and power seem content to let the rest of us suffer under their greed. But really, how much does one person need to be truly happy? Isn't a good life about having great family and friends by your side?

As I get better at this, I'll move on to more complex projects—some of which I've already built but plan to rebuild. I haven't been coding for long, but the learning curve I've experienced with AI code editing tools like WINDSURF has been unparalleled. I already have two projects in mind, both built with Django. Stay tuned!

My name is Aaron James Peters and thank you for watching.

WINDSURF 02 - Making a FLASK APP EASY!!! - Finishing folder structure

https://youtu.be/o9kdfk1Q-L0

In this video, I demonstrate how WINDSURF editor and Codeium AI collaborate to generate a portion of the folder structure for a Flask app. Since Codeium can't generate the entire Flask application in one go, I walk you through what it successfully generated, how far it got, and how much more is required for the app to run locally in the browser. This highlights the gaps and the additional steps needed to complete the setup. I completely forget to run the commands and wonder why it's not running. NUBE Lol!

WINDSURF 03 - Making a FLASK APP EASY!!! - Setting up the .venv folder

https://youtu.be/eFMfZ0CFbKM

In this video, I set up the .venv folder and ensure all dependencies are installed. I run into a few issues that require troubleshooting before totally forgetting to run the commands for the app to start wondering what happened, definitely a nube just like in the last video. Lol In the next video we get it started, though. One key tip: when working in local development, avoid using HTTPS—it can clutter your terminal output and make it difficult to read.

WINDSURF 04 - Making a FLASK APP EASY!!! - Troubleshooting/Debugging

https://youtu.be/eqmBMIs2y8E

BY THE END I'M RUNNING IN LOCAL DEV. IT BEEN MAYBE 30-45 MIN TOPS. This would take a team a whole week.
In this video, watch me coach Cody (Codeium AI) as it tries to render the initial setup of the Flask app. It’s a bit of a struggle, and I make a few simple mistakes along the way, but in the end, I get the app up and running. A reminder that coding is all about persistence and learning from those small errors!

WINDSURF 05 - Making a FLASK APP EASY!!! - FORGOT!!! git init

https://youtu.be/gAnmIrpZmkA

In this video, I initialize Git and start tracking the project folder—something I really should have done from the start! Luckily, with WINDSURF editor and Codeium AI, getting everything set up correctly was quick and easy. I also create a dev branch and begin working from there, following best practices for development.

WINDSURF 06 - Making a FLASK APP EASY!!! - Different Logging Levels w/ quick chat

https://youtu.be/3WHWDnJM6FI

In this video, I walk through setting up logging for both development and production using WINDSURF editor chat. The goal is to configure logging so development has detailed local debugging, while production only tracks error and info logs. This setup makes it much easier to debug locally and monitor server-side activity. It also helps identify any unusual behavior from users, keeping the app secure and running smoothly.

WINDSURF 07 - Making a FLASK APP EASY!!! - DEBUG-.env creation & more DEBUGGING

https://youtu.be/2aAKnZ_dET4

In this video, I run into some challenges setting up proper logging. I create the essential .env file, but I struggle to get the logging configuration to work seamlessly between the .env, base.py, and its dependent configuration files—dev.py for local development and prod.py for deployment. I also go over how I set up the .env file to manage the environment for each configuration, ensuring that dev.py is used for local development and prod.py is ready for deployment. It’s a great reminder that fine-tuning these configurations takes time but is crucial for a smooth development workflow.

WINDSURF 08 - Making a FLASK APP EASY!!! - Explainer of off Camera Logging Setup

https://youtu.be/BoZsNXwjxKo

In this video, I recap all the off-camera debugging and setup required to get the logging flow working properly. I couldn’t show every step, but the key challenge was configuring the .env file to work seamlessly with .env.development and .env.production. These files connect through base.py in the config folder to ensure the right logging settings are applied from dev.py for development and prod.py for production. Since .env.production needs a secure token (secrets.token_hex(32)), I created a .env.production.template file to show the structure without exposing sensitive info. When deploying to Render, I’ll generate the token and copy it into the actual .env.production file. DISCLAIMER: made this a little more complicated than it needs to be, best thing is to work in local development and you can check production is working with the variables in the .env file even though I separated the .env.production .env.developemnt, although you can just upload the .env production variables later. For something this simple it not required. You couuld just do a simple set up in the .env.





WINDSURF 09 - Making a FLASK APP EASY!!! - Git commit & Merge code back to main repo

https://youtu.be/-bT9eOCnZMU

In this video, I waited way too long to initialize Git, so it’s time to fix that. I set up Git, make a dev commit, and since I didn’t add a .gitignore or .gitkeep earlier, things got a little messy. Most of the video is me coaching back and forth to handle the merge and get everything from dev merged cleanly back into the main branch. Lesson learned—always set up Git and .gitignore early!

WINDSURF 10 - Making a FLASK APP EASY!!! git commit & HOME PAGE BUTTONS DEBUG

https://youtu.be/WAwTQDMVD7U

In this video, I add Projects and YouTube buttons to the app to better showcase my skills. I decided to use Flask Blueprints to keep things professional. While I could’ve stuck with a single routes.py, breaking the logic into separate files using Blueprints makes the code much easier to navigate. It also simplifies debugging and updating the relationships between templates and endpoints. Definitely worth the extra effort!

WINDSURF 11 - Making a FLASK APP EASY!!! git commit & HOME PAGE BUTTONS DEBUG

https://youtu.be/P_MGzQJflQk

In this video, I do a quick commit and set up the Blueprint folder. Although I didn’t get the app fully working at first, I realized off-camera that each Blueprint needs its own folder in the templates directory. Since it’s my first time using Blueprints for script communication, there was definitely a learning curve. Thankfully, with the help of WINDSURF editor and Cassi (Codeium AI), we worked through it together. I’ll explain how it all comes together in the next video!

WINDSURF 12 - Making a FLASK APP EASY!!! Final Home Buttons FIX

https://youtu.be/m8ZRPhrVzy8

In this video, I troubleshoot the templates folder setup. I had to create a separate folder for each Blueprint in the templates directory to render individual index.html files. This ensures that each endpoint has its own dedicated page, keeping everything organized and working as expected.

WINDSURF 13 - Making a FLASK APP EASY!!! Git commit & Logs BROKE had to debug them

https://youtu.be/8vKqv_uPbEY

In this video, I do a quick Git commit and then notice my logs have stopped working. Logs are essential—especially when using an AI code editor like WINDSURF or any other tool. While you can rely on the terminal in local development, once the app is deployed, there’s no terminal access. Having info.log and error.log functioning correctly is crucial for tracking issues. It took some time to fix, but I made sure the terminal now displays the current environment so I don’t accidentally work in the wrong one.

WINDSURF 14 - Making a FLASK APP EASY!!! STARTING TO ACTUALLY BUILD!!!

https://youtu.be/K_ND3X8UmAg

In this video, I start building the resume endpoint and make another Git commit. To help Cassi (Codeium AI) understand the structure of my resume, I used all caps for section headers and added a - before any lines I wanted it to render as bold. Sometimes, you have to get creative to communicate effectively with AI. WINDSURF continues to impress—truly an amazing tool for coding and collaboration!

WINDSURF 15 - Making a FLASK APP EASY!!! Building the Resume index.html

https://youtu.be/DiLpe6QF_nY

In this video, I focus on getting Cassi (Codeium AI) to properly recognize the resume headers and bold lines. As I mentioned in the previous video, I capitalized the headers and added a - in front of the lines I wanted bold. Unfortunately, that step didn’t make it into this video—apologies for the confusion! It’s all about trial and error to find the best way to communicate with the AI.

WINDSURF 16 - Making a FLASK APP EASY!!! Excluding the media folder from tracking

https://youtu.be/-1htFTLAbWs

In this video, I do some debugging for the media folder, adding .gitignore and .gitkeep to manage which files get tracked. I run into a few issues switching between my dev and main branches in Git. I fixed some of those off-camera to keep the video shorter, but one key tip: when moving between dev and main, it’s crucial not to track the media folder.
EXTRA INFO: I reveal how I styled the resume page in the comment section of the last video description! Be sure to check that out.

WINDSURF 17 - Making a FLASK APP EASY!!! Making better terminal logs on app start up

https://youtu.be/1SOHMHvynXI

In this video, I create a main.py file in the Blueprints folder to display environment logs at startup. This helps ensure the environment is set up correctly. For this app, it’s not critical since I’m only switching between dev.py and prod.py, but for more advanced apps with additional environments like staging and testing, it’s super helpful to see how the logs are running in each environment. This setup makes managing environments much easier!

WINDSURF 18 - Making a FLASK APP EASY!!! Building the bio page finally!

https://youtu.be/JSgrWpupwA8

In this video, I add the bio text from the media folder to the bio page/endpoint. It’s a pretty straightforward process. Next, I plan to add an image from the media/images folder to enhance the page. Stay tuned for that update!

WINDSURF 19 - Making a FLASK APP EASY!!! Building the bio page finally!

https://youtu.be/j_lP9uq94oo

In this video, I add the project details and GitHub links to the projects page/endpoint. I also include a live demo link for the last Flask app. It’s a pretty straightforward process, tying everything together to showcase the work effectively.

WINDSURF 20- Making a FLASK APP EASY!!! Setting up the YouTube links!



In this video, I begin working on the YouTube video page/endpoint, troubleshooting the layout for the title, thumbnail, and description. Unfortunately, I run into some issues and don’t quite get everything working. I also realize I need to install the required YouTube dependencies—but I never actually install them, which causes the setup to fail. Sometimes, things don’t go as planned! I’ll tackle the fixes in the next video.

WINDSURF 21- Making a FLASK APP EASY!!! INSTALLING YouTube dependancies!



In this video, I install all the required dependencies for the YouTube functionality to display thumbnails and video information. While the format looks good overall, the thumbnail still has some issues. I also update the requirements.txt to ensure all dependencies are tracked for future installs. Progress is steady, but there’s still some tweaking needed to get the thumbnails working perfectly!

WINDSURF 22- Making a FLASK APP EASY!!! YouTube format overview !



In this video, I explain how I successfully formatted the YouTube page/endpoint. I walk through the questions I asked Cassi (Codeium AI) to troubleshoot and refine the layout. Finally, I give a quick demonstration to show how well the links are working—everything’s coming together smoothly!

WINDSURF 23- Making a FLASK APP EASY!!! Explaining upload to YouTube & Setting App Info !



In this video, I give a quick explainer on how to upload to YouTube and where the necessary information needs to go for it to display properly in the app. I show a successful YouTube page/endpoint in action. With everything working as expected, I’m finally ready to add all my videos from this build!

